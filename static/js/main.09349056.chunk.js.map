{"version":3,"sources":["logo.svg","component/card/card.jsx","component/card-list/CardList.jsx","component/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","champion","id","name","CardList","display","champions","Object","keys","map","each","index","key","SearchBox","placeholder","handleChange","type","onChange","App","state","userInfo","searchField","fetch","then","res","json","data","console","log","setState","catch","err","this","dict","filter","toLowerCase","includes","reduce","obj","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,4LCa5BC,G,YAVF,SAACC,GACV,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,qEAAgEF,EAAMG,SAASC,GAA/E,YACR,4BACKJ,EAAMG,SAASE,SCejBC,G,MAnBE,SAACN,GAGd,IAAIO,EAAU,0CAUd,OATsB,MAAnBP,EAAMQ,YACLD,EAAUE,OAAOC,KAAKV,EAAMQ,WAAWG,KAAI,SAACC,EAAMC,GAC9C,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAOV,SAAUH,EAAMQ,UAAUI,IACvCA,OAMb,yBAAKX,UAAU,aACVM,K,YCCEQ,MAff,YAAiD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC7B,OACI,2BAAOhB,UAAU,YACbiB,KAAK,SACLF,YAAcA,EACdG,SAAWF,KC8CRG,G,kBA9Cb,aAAc,IAAD,8BACX,+CAEKC,MAAQ,CACXC,SAAW,KACXd,UAAY,GACZe,YAAa,IANJ,E,iFAUQ,IAAD,OAClBC,MAbc,0EAcXC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACvB,UAAYoB,EAAKA,UAEjCI,OAAM,SAAAC,GAAG,OAAEJ,QAAQC,IAAIG,MAC1BT,MArBe,0MAsBZC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACT,SAAUM,OAE1BI,OAAM,SAAAC,GAAG,OAAEJ,QAAQC,IAAIG,Q,+BAIlB,IAAD,SAC6BC,KAAKb,MAAjCb,EADD,EACCA,UAAWe,EADZ,EACYA,YAGbY,EAFoB1B,OAAOC,KAAKF,GAAW4B,QAAO,SAAAjC,GAAQ,OAC9DK,EAAUL,GAAUE,KAAKgC,cAAcC,SAASf,EAAYc,kBAC/BE,QAAO,SAACC,EAAI1B,GAEzC,OADA0B,EAAI1B,GAAON,EAAUM,GACd0B,IACP,IACF,OACE,yBAAKvC,UAAU,OACb,wBAAIA,UAAU,SAAd,gCACA,kBAAC,EAAD,CAAWe,YAAY,mBAAmBC,aAAc,SAAAwB,GAAC,OAAI,EAAKV,SAAS,CAACR,YAAckB,EAAEC,OAAOC,WACnG,kBAAC,EAAD,CAAUnC,UAAa2B,S,GAzCbS,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.09349056.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport '../card/card.css'\n\nconst Card = (props) => {\n    return(\n        <div className=\"card-container\">\n            <img src={`http://ddragon.leagueoflegends.com/cdn/img/champion/splash/${props.champion.id}_0.jpg`}/>\n            <h3>\n                {props.champion.name}\n            </h3>\n        </div>\n    )\n}\nexport default Card;","import React from 'react'\nimport Card from '../card/card'\nimport './card-list.styles.css'\n\nconst CardList = (props) => {\n    \n\n    let display = <li> Unloaded </li>\n    if(props.champions != null){\n        display = Object.keys(props.champions).map((each, index)=>{\n            return (\n                <Card key={index} champion={props.champions[each]}>\n                    {each}\n                </Card>\n            )\n        })\n    }\n    return(\n        <div className=\"card-list\">\n            {display}\n        </div>\n    )\n}\nexport default CardList;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { prototype } from 'events';\nimport './SearchBox.css';\n\nfunction SearchBox({placeholder, handleChange}) {\n    return (\n        <input className='SearchBox'\n            type='search' \n            placeholder= {placeholder}\n            onChange= {handleChange}\n        />\n    )\n}\n\nSearchBox.propTypes = {\n    placeholder : PropTypes.string.isRequired,\n    handleChange : PropTypes.func.isRequired,\n}\n\nexport default SearchBox\n\n","import React  from 'react';\nimport logo from './logo.svg';\nimport CardList from './component/card-list/CardList';\nimport SearchBox from './component/SearchBox/SearchBox';\nimport './App.css'\n\nconst API_KEYS = \"RGAPI-2e2efa4a-e927-4270-9130-ac3a097d58f4\";\nconst FETCH_URL =  \"https://cors-anywhere.herokuapp.com/https://na1.api.riotgames.com/lol/league/v4/entries/by-summoner/_0PheTkqlc8QbhI8W_1O2SzRw6PqRIzu8XecAGBvEgPmkC8?api_key=RGAPI-2cd6af10-7e05-4faa-9b35-8bc3798ebb69\";\nconst CHAMP_URL = \"http://ddragon.leagueoflegends.com/cdn/9.24.2/data/en_US/champion.json\"\nclass App extends React.Component {\n  constructor(){\n    super();\n\n    this.state = { \n      userInfo : null,\n      champions : {},\n      searchField: '',\n    }\n  }\n\n  componentDidMount() {\n    fetch(CHAMP_URL)\n      .then(res=>res.json())\n      .then(data=>{\n        console.log(data);\n        this.setState({champions : data.data});\n      })\n      .catch(err=>console.log(err));\n    fetch(FETCH_URL)\n      .then(res=>res.json())\n      .then(data=>{\n        console.log(data);\n        this.setState({userInfo: data});\n      })\n      .catch(err=>console.log(err));\n  }\n  \n\n  render() {\n    const { champions, searchField } =  this.state;\n    const filteredChampions = Object.keys(champions).filter(champion => \n      champions[champion].name.toLowerCase().includes(searchField.toLowerCase()));\n    const dict = filteredChampions.reduce((obj,key)=>{\n      obj[key] = champions[key];\n      return obj;\n    },{})\n    return(\n      <div className=\"App\">\n        <h3 className=\"Title\"> League of Legends Champions</h3>\n        <SearchBox placeholder='search champions' handleChange={e => this.setState({searchField : e.target.value})}/>\n        <CardList champions = {dict}/>        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}